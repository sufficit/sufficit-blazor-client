@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
@inject WebAssemblyLocalStorageService StateContainer
@inject ApplicationAuthenticationState AuthenticationState
@implements IDisposable

<MudPaper Class="pa-1 ma-1" Elevation="0">

    <AuthorizeView>
        <Authorized>
            <strong>Hello, @context.User.Identity.Name!</strong>
            <a href="Account/Logout">Log out</a>
        </Authorized>
        <NotAuthorized>
            <a href="Account/Login">Log in</a>
        </NotAuthorized>
    </AuthorizeView>

</MudPaper>

<MudPaper Class="pa-1 ma-1" Elevation="0">
    <MudText>ID: @AuthenticationState?.Id :: State: @AuthenticationState?.session_state</MudText>
    <AuthorizeView>
        <Authorized>
            Hello, @context.User.Identity.Name!
            <button class="nav-link btn btn-link" @onclick="BeginSignOut">
                Log out
            </button>
        </Authorized>
        <NotAuthorized>
            <a href="authentication/login">Log in</a>
        </NotAuthorized>
    </AuthorizeView>
</MudPaper>

@code {
    private async Task BeginSignOut(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }

    protected override void OnInitialized()
    {
        AuthenticationState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        AuthenticationState.OnChange -= StateHasChanged;
    }
}
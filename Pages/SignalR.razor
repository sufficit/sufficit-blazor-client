@page "/signalr"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Reactive.Subjects
@using System.Collections.Concurrent
@using System.Threading
@using Sufficit.AsteriskManager.Events
@using System.Dynamic
@using Newtonsoft.Json
@using System.Text.Json
@using System.Diagnostics
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<MudText>@hubConnection?.State</MudText>

@if (IsConnected)
{
    <hr>
    <div class="form-group">
        <label>
            Filtro:
            <input size="50" @oninput="OnSetFilter" @bind="filterInput" />
        </label>
    </div>
}
<hr>
<hr>
<ul id="messagesList">
    @foreach (var message in Buffer)
    {
        <li>@message</li>
    }
</ul>

@code {
    private MessagesBuffer<string> Buffer = new MessagesBuffer<string>(20);
    private HubConnection hubConnection;
    private string userInput;
    private string filterInput;

    protected override async Task OnInitializedAsync()
    {
        //messages.Buffer(20);
        hubConnection = new HubConnectionBuilder()
            .WithUrl(new Uri("https://localhost:5001/amihub"))
            .Build();

        hubConnection.On<string>("System", SystemCommunication);
        hubConnection.On<string, PeerStatusEvent>("Event:PeerStatus", ReceiveEventHandler);
        hubConnection.On<string, QueueCallerAbandonEvent>("Event:QueueCallerAbandon", ReceiveEventHandler);
        hubConnection.Reconnecting += OnHubReconnecting;
        hubConnection.Reconnected += OnHubReconnected;
        hubConnection.Closed += OnHubClosed;

        await hubConnection.StartAsync();
        //await Send();

    }
    
    #region CONECTIONS EVENTS

    async Task OnHubReconnected(string s)
    {
        SystemCommunication($"reconected: {s}");
        await hubConnection.SendAsync("SetFilter", filterInput);
    }

    async Task OnHubClosed(Exception ex)
    {
        if(ex != null)
        {
            SystemCommunication($"error on closed: {ex.Message}");
            Stopwatch sw = new Stopwatch();
            sw.Start();
            while (hubConnection.State != HubConnectionState.Connected)
            {
                try{
                    await hubConnection.StartAsync();                      
                }catch(Exception exx)
                {                    
                    SystemCommunication($"error on retrying ({sw.ElapsedMilliseconds})ms: {exx.Message}");
                    await Task.Delay(2000);
                }
            }
            await hubConnection.SendAsync("SetFilter", filterInput);
        }
        await Task.CompletedTask;
    }
    
    async Task OnHubReconnecting(Exception ex)
    {
        if(ex != null)
        {
            SystemCommunication($"error on reconecting: {ex.Message}");
        }
        await Task.CompletedTask;
    }
    
    #endregion

    private async Task OnSetFilter(ChangeEventArgs e)
    {
        await hubConnection.SendAsync("SetFilter", e.Value.ToString());
    }

    void SystemCommunication(string message)
    {
        var encodedMsg = $"system: {message}";
        Buffer.Add(encodedMsg);        
        StateHasChanged();
    }

    void ReceiveEventHandler(string sender, QueueCallerAbandonEvent eventObj)
    {
        string encodedMsg = $"QueueCallerAbandonEvent :: {sender} :: ";
        encodedMsg += eventObj.CallerIdNum;
               
        Buffer.Add(encodedMsg);
        StateHasChanged();   
    }

    void ReceiveEventHandler(string sender, PeerStatusEvent eventObj)
    {
        string encodedMsg = $"PeerStatusEvent :: {sender} :: ";
        encodedMsg += eventObj.Peer;
               
        Buffer.Add(encodedMsg);
        StateHasChanged();   
    }

    
    
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}
@page "/userinfobyasp"
@attribute [Authorize]
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAccessTokenProvider TokenProvider
@inject IHttpClientFactory ClientFactory

<MudPaper Class="pa-1 ma-1" Elevation="0">
    <h3>ClaimsPrincipal data using default "AuthenticationStateProvider" </h3>

    <p>@_authMessage</p>

    @if (_claims.Count() > 0)
    {
        <ul>
            @foreach (var claim in _claims)
            {
                <li>@claim.Type: @claim.Value</li>
            }
        </ul>
    }

    <p>@_surnameMessage</p>

    <p>TOKEN ::: @accessToken?.Value</p>
</MudPaper>

@code {
    private string _authMessage;
    private string _surnameMessage;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
    private AccessToken accessToken;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _authMessage = $"{user.Identity.Name} is authenticated.";
            _claims = user.Claims;
            _surnameMessage = $"Surname: {user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value}";

            var tokenResult = await TokenProvider.RequestAccessToken();
            tokenResult.TryGetToken(out accessToken);
        }
        else
        {
            _authMessage = "The user is NOT authenticated.";
        }
    }
}

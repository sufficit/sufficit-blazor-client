@page "/authentication/{action}"
@using Models
@inject ApplicationAuthenticationState AuthenticationState
@inject ILocalStorageService LocalStorage

<h3>@Action</h3>
<RemoteAuthenticatorViewCore Action="@Action"
                             TAuthenticationState="ApplicationAuthenticationState"
                             AuthenticationState="AuthenticationState"
                             OnLogInSucceeded="RestoreState"
                             OnLogOutSucceeded="RestoreState" />

@code {
    [Parameter]
    public string Action { get; set; }

    protected async override Task OnInitializedAsync()
    {
        if (RemoteAuthenticationActions.IsAction(RemoteAuthenticationActions.LogIn, Action) ||
            RemoteAuthenticationActions.IsAction(RemoteAuthenticationActions.LogOut, Action))
        {
            if (string.IsNullOrWhiteSpace(AuthenticationState.Id))
                AuthenticationState.Id = Guid.NewGuid().ToString();

            await LocalStorage.SetItem<ApplicationAuthenticationState>("sufficituser", AuthenticationState);
            await LocalStorage.SetItem<User>("user", new User() { Id = AuthenticationState.Id });
        }
    }

    private async Task RestoreState(ApplicationAuthenticationState state)
    {
        if (!string.IsNullOrWhiteSpace(state.Id))
        {
            var fromStorage = await LocalStorage.GetItem<ApplicationAuthenticationState>("sufficituser");
            if(fromStorage != null)
            {
                AuthenticationState.SetStateFromLocalStorage(fromStorage);
            }
        }
    }
}

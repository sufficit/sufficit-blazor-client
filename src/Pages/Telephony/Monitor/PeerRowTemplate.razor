@implements IDisposable

<MudTd DataLabel="Permanent">
    @if(@Monitor.Permanent) {
        <MudTooltip Text="Permanente">
            <MudIcon Icon="@Icons.Material.Filled.PushPin" Size="Size.Small"></MudIcon>
        </MudTooltip>
    } else {
        <MudTooltip Text="Temporário">
            <MudIcon Icon="@Icons.Material.Filled.Timer" Size="Size.Small"></MudIcon>
        </MudTooltip>
    }
</MudTd>
<MudTd DataLabel="Protocolo">@Monitor.Content.Protocol</MudTd>
<MudTd DataLabel="Ramal">@Monitor.Content.Name</MudTd>
<MudTd DataLabel="Estado">
    <MudIcon 
        Icon="@Icons.Material.Filled.Lens" 
        Size="Size.Small" 
        Color="@Monitor.Content.Status.ToColor()"></MudIcon>
    @Monitor.Content.Status.ToCulture()
</MudTd>
<MudTd DataLabel="Endereço">@Monitor.Content.Address</MudTd>
<MudTd DataLabel="Motivo">@Monitor.Content.Cause</MudTd>
<MudTd DataLabel="Tempo">@Monitor.Content.Time</MudTd>
   
@code {
    [Parameter]
    [EditorRequired]
    public Sufficit.Telephony.EventsPanel.PeerInfoMonitor Monitor { get; set; } = default!;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        Monitor.OnChanged -= OnMonitorChanged;
        Monitor.OnChanged += OnMonitorChanged;
    }

    protected async void OnMonitorChanged(IMonitor monitor, object? __)
    {
        if (monitor == Monitor)
            await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Monitor.OnChanged -= OnMonitorChanged;
    }
}
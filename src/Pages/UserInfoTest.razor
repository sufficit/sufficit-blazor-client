@page "/userinfobytest"
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="pa-1 ma-1">
    <hr />
    <h3>ClaimsPrincipal data using default "@AuthenticationStateProvider.GetType().Name" </h3>
    <h5>AuthenticationType: @User?.Identity.AuthenticationType</h5>
    <hr />
    <p>@_authMessage</p>
    <p>Administrador: @isAdmin</p>
    <p>@User?.Identity.AuthenticationType</p>
    <hr />
    @if (_claims.Any())
    {
        <ul>
            @foreach (var claim in _claims)
            {
                <li>@claim.Type: @claim.Value</li>
            }
        </ul>
    }

</div>

@code {
    private string _authMessage;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
    private ClaimsPrincipal User;
    private bool isAdmin;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            AuthenticationState state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            User = state.User;

            if (User.Identity.IsAuthenticated)
            {
                _authMessage = $"{User.Identity.Name} is authenticated.";
                _claims = User.Claims;

                isAdmin = User.IsInRole("administrador");


                //if ((await AuthorizationService.AuthorizeAsync(user, "content-editor")).Succeeded)
                {
                    // Perform an action only available to users satisfying the 
                    // 'content-editor' policy.
                }
            }
            else
            {
                _authMessage = "The user is NOT authenticated.";
            }
        }
        catch { }
    }
}
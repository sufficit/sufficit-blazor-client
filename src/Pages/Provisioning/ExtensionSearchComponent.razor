@using Sufficit.Telephony;
@using System.Threading;
<MudItem>
    <MudCard Elevation="0">
        Escolha de extensão
        <MudAutocomplete T="Sufficit.Telephony.EndPoint" Label="EndPoint" SearchFunc="@GetEndPoints" Variant="Variant.Outlined" ShowProgressIndicator="true"
                         ToStringFunc="@(e => e.Title)"
                         Value="EndPoint" ValueChanged="EndPointChanged" />
    </MudCard>
</MudItem>

@code {
    [Inject]
    private APIClientService APIClient { get; set; } = default!;

    [EditorRequired]
    [Parameter]
    public Guid? ContextId { get; set; }

    [Parameter]
    public Sufficit.Telephony.EndPoint? EndPoint { get; set; }

    [Parameter]
    public EventCallback<EndPoint?> EndPointChanged { get; set; }

    private async Task<IEnumerable<EndPoint>> GetEndPoints(string value, CancellationToken cancellationToken)
    {
        if (ContextId.HasValue && ContextId.Value != Guid.Empty)
        {
            // if text is null or empty, show complete list
            var parameters = new EndPointSearchParameters();
            parameters.ContextId = ContextId.Value;
            parameters.Title = value;
            parameters.Limit = 5;
            return await APIClient.Telephony.EndPoint.GetEndPoints(parameters, cancellationToken);
        }

        return Array.Empty<EndPoint>();
    }
}
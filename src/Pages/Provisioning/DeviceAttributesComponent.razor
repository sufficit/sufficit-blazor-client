@using Sufficit.Provisioning;
@using Sufficit.Telephony;

<MudCard Class="ma-2" Elevation="25">
    <MudCardHeader>
        <CardHeaderAvatar>
            <MudIcon Icon="@Icons.Material.Filled.Devices" />
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Atributos Personalizados</MudText>
            <MudText Typo="Typo.body2">Ao incluir um novo dispositivo, saiba que qualquer configuração prévia será apagada.</MudText>
            <MudText Typo="Typo.caption">Os dispositivos normalmente são reconhecidos automaticamente pelo sistema.</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudDivider DividerType="DividerType.Middle" />
    <MudCardContent>
        <MudGrid>
            <MudItem xs="12" sm="6" md="5">
                <MudTextField Variant="Variant.Outlined" T="string" @bind-Text="Selected.Key" />
            </MudItem>
            <MudItem xs="12" sm="6" md="5">
                <MudTextField Variant="Variant.Outlined" T="string" @bind-Text="Selected.Value" />
            </MudItem>
            <MudItem xs="12" sm="6" md="2">
                <MudButtonEnchanted Variant="Variant.Filled" Color="Color.Primary" OnClick="OnUpdateClick" FullWidth="true">
                    <MudText>Atualizar</MudText>                    
                </MudButtonEnchanted>
            </MudItem>
        </MudGrid>
        @if (Attributes != null && Attributes.Any())
        {
            <MudTable @ref="Table"
                RowStyle="cursor: pointer;"
                T="DeviceAttribute"
                Dense="true"
                Hover="true"
                Elevation="0"
                Style="padding: 0;"
                Breakpoint="Breakpoint.Sm"
                LoadingProgressColor="Color.Info"
                ServerData="GetData"
                SelectedItemChanged="SelectedItemChanged">
                    <HeaderContent>
                        <MudTh Style="text-align: center; width: 150px;">Ações</MudTh>
                        <MudTh Style="text-align: left; width: 300px;">Chave</MudTh>
                        <MudTh Style="text-align: center; width: 100px;">Valor</MudTh>                        
                    </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Ações" Style="text-align: center; max-width: 150px;">
                        <MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteOutline" OnClick="@(() => DeleteAttribute(@context))">
                            Remover
                        </MudButton>
                    </MudTd>
                    <MudTd DataLabel="Diretiva" Style="text-align: left; max-width: 500px; white-space: nowrap;">
                        @context.Key
                    </MudTd>
                    <MudTd DataLabel="Avatar" Style="text-align: center; max-width: 100px; white-space: nowrap;">
                        @context.Value
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>        
                    <MudText>Nenhum resultado encontrado ! ...</MudText>         
                </NoRecordsContent>
            </MudTable>
        }
    </MudCardContent>
    <MudCardActions Class="justify-end">
    </MudCardActions>    
</MudCard>

@code {
    [Inject]
    private APIClientService APIClient { get; set; } = default!;

    [EditorRequired]
    [Parameter]
    public string? MACAddress { get; set; }

    [Parameter]
    public EventCallback<DeviceAttribute> SelectedItemChanged { get; set; }

    [EditorRequired]
    protected MudTable<DeviceAttribute>? Table { get; set; } = default!;

    IEnumerable<DeviceAttribute>? Attributes { get; set; }

    DeviceAttribute Selected { get; set; } = new DeviceAttribute() { };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) 
            return;

        if (MACAddress != null && MACAddress.IsValidMACBytes())
        {
            // updating mac for selected
            Selected.MACAddress = MACAddress;

            Attributes = await APIClient.Provisioning.AttributesByMAC(MACAddress!, System.Threading.CancellationToken.None);
            if (Attributes == null) Array.Empty<DeviceAttribute>();

            await InvokeAsync(StateHasChanged);
        }
    }

    /// <summary>
    /// Reload server data
    /// </summary>
    public async Task DataBind()
    {
        if (Table != null)
        {
            await Table.ReloadServerData();
            await InvokeAsync(StateHasChanged);
        }
    }

    protected async Task<TableData<DeviceAttribute>> GetData(TableState _)
    {
        try
        {
            if (MACAddress != null && MACAddress.IsValidMACBytes())
            {            
                var response = await APIClient.Provisioning.AttributesByMAC(MACAddress!, System.Threading.CancellationToken.None);
                Attributes = response ?? Array.Empty<DeviceAttribute>();            
            }
            else { Attributes = Array.Empty<DeviceAttribute>(); }
        }
        catch { Attributes = Array.Empty<DeviceAttribute>(); }

        return new TableData<DeviceAttribute>() { Items = Attributes };
    }

    protected async Task DeleteAttribute(DeviceAttribute e)
    {
        await APIClient.Provisioning.Delete(e.MACAddress, e.Key, System.Threading.CancellationToken.None);
        await DataBind();
    }

    protected async Task OnUpdateClick(MouseEventArgs e)
    {
        if (Selected != null)
        {
            await APIClient.Provisioning.Update(Selected, System.Threading.CancellationToken.None);
            await DataBind();
        }
        else
        {
            throw new Exception("Atributo não selecionado");
        }
    }
}
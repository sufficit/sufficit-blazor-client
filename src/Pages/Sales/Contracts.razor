@attribute [Route(RouteParameter)]
@attribute [Authorize(Roles = "salesmanager")]
@inherits BasePageComponent
@using Sufficit.Client;
@using Sufficit.Sales;
@using Sufficit.Telephony;
@using Sufficit.Blazor.Client.Models;
@using System.Threading;
@using static Sufficit.Sales.Constants;

@if (ContextView.ContextId.GetValueOrDefault() == Guid.Empty)
{
    <MudPaper Elevation="0" Style="background-color: transparent;" Class="px-md-16 py-16 d-flex align-center justify-center mud-width-full">
        <ClientMissing></ClientMissing>
    </MudPaper>
}

@if (!string.IsNullOrWhiteSpace(Error))
{
    <div class="card card-error">@Error</div>
}

<MudCard>
    <MudCardHeader>
        <MudSwitch T="bool" Checked="@ShowExpired" Color="Color.Primary" CheckedChanged="ShowExpiredChanged">Visualizar expirados</MudSwitch>
    </MudCardHeader>
    <MudCardContent>
        <MudTable Items="@Items" Bordered="true" Hover="true" Breakpoint="Breakpoint.Sm" FixedHeader="true" LoadingProgressColor="Color.Info">
            <ColGroup> 
                <col style="min-width: 200px;" />
                <col style="width: 200px;" />
                <col style="width: 120px;" />
                <col style="width: 60px;" />
                <col style="width: 40px;" />
                <col style="width: 60px;" />
            </ColGroup>
            <HeaderContent>
                <MudTh Class="mud-table-cell-align-center">Titulo</MudTh>
                <MudTh Class="mud-table-cell-align-center">Chave</MudTh>
                <MudTh Class="mud-table-cell-align-center">Valor</MudTh>
                <MudTh Class="mud-table-cell-align-center">Vencimento</MudTh>
                <MudTh Class="mud-table-cell-align-center">Dia de Faturamento</MudTh>
                <MudTh Class="mud-table-cell-align-center"></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Titulo">
                    <MudText Typo="Typo.body1">
                        <MudIcon Icon="@GetIcon(context.Title)" Size="Size.Small" Class="mr-4" Style="vertical-align: sub;"></MudIcon>
                        @context.Title
                    </MudText>
                    @if(context.Extra != null)
                    {
                        <MudDivider Class="mt-1"></MudDivider>
                        <MudText Typo="Typo.caption">@context.Extra</MudText>
                    }
                </MudTd>
                <MudTd DataLabel="Chave">@KeyFormat(context.Key)</MudTd>
                <MudTd DataLabel="Valor">@(context.Value > 0 ? context.Value.ToString("C") : "---")</MudTd>
                <MudTd DataLabel="Vencimento" Class="mud-table-cell-align-center" Style="@GetExpired(context.End)">@(context.End?.ToString("dd/MM/yyyy") ?? "---")</MudTd>
                <MudTd DataLabel="Dia de Faturamento" Class="mud-table-cell-align-center">@context.DueDay</MudTd>
                <MudTd DataLabel="Comandos" Class="mud-table-cell-align-center">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Info" Size="Size.Small" Href='@("/pages/sales/recurringitem?id=" + context.Id)' />
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudCardContent>
</MudCard>

@code {
    public const string RouteParameter = "/pages/sales/contracts";

    public const string Icon = Icons.Material.Filled.EventRepeat;

    protected override string Title => "Serviços recorrentes";

    protected override string? Area => "Vendas";

    //Style="@($"color:{Colors.LightGreen.Accent3}; background:{Colors.BlueGrey.Darken4};")"
    protected string ExpiredStyle = $"background:{Colors.Red.Lighten4}";

    #region VISUAL ADJUSTS

    protected string GetExpired(DateTime? end)       
    {
        return (end < DateTime.Now) ? ExpiredStyle : string.Empty;
    }

    protected string? KeyFormat(string? key)
    {
        if (Sufficit.Telephony.Utils.IsValidPhoneNumber(key, false))
            return Sufficit.Telephony.Utils.FormatarTelefoneE164Semantic(key!);
        else
            return key;
    }

    protected string GetIcon(string title)
    {
        switch (title)
        {
            case SERVICE_TRUNK_INBOUND: return @Icons.Material.Filled.TripOrigin;
            case SERVICE_FLASH_OPERATOR_PANEL: return @Icons.Material.Filled.SmartButton;
            case SERVICE_BUSINESS_SUPPORT: return @Icons.Material.Filled.SupportAgent;
            case SERVICE_TRUNK_FIXED_UNLIMITED:
            case SERVICE_TRUNK_MOBILE_UNLIMITED:
                return @Icons.Material.Filled.Start;
            default: return @Icons.Material.Filled.Pending;
        }
    }

    #endregion

    [Inject] 
    APIClientService Service { get; set; } = default!;

    [Inject]
    IContextView ContextView { get; set; } = default!;

    protected bool ShowExpired { get; set; }

    protected IEnumerable<Contract> Items = Array.Empty<Contract>();

    private string? Error;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (!firstRender) return;

        ContextView.OnChanged += ContextChanged;

        var contextid = ContextView.ContextId.GetValueOrDefault();
        if (contextid != Guid.Empty)
            await Filter(contextid);
    }

    protected async void ContextChanged(Guid? value)
        => await Filter(value.GetValueOrDefault());

    protected async void ShowExpiredChanged(bool value)
    {
        ShowExpired = value;
        await Filter(ContextView.ContextId.GetValueOrDefault());
    }

    protected async Task Filter(Guid ContextId)
    {
        Items = Array.Empty<Contract>();
        Error = string.Empty;

        if (ContextId != Guid.Empty)
        {
            var parameters = new ContractSearchParameters();
            parameters.ContextId = ContextId;
            if (!ShowExpired)            
                parameters.Expiration = new DateTimeRange() { Start = DateTime.Today, Inclusive = true };            

            try
            {
                Items = await Service.Sales.GetContracts(parameters, CancellationToken.None);
            }
            catch (UnauthorizedAccessException)
            {
                Error = "Não autorizado";
            }
            catch (Exception ex)
            {
                Error = ex.Message;
            }
        }

        // refresh front end
        await InvokeAsync(StateHasChanged);
    }
}
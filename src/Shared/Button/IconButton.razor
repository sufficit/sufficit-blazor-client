@namespace Sufficit.Blazor.Client.Shared

<MudButton Color="@BackgroundColor" Variant="@Variant" OnClick="@Click">
    @if (IsLoading)
    {
        <MudProgressCircular Indeterminate Color="@TextColor" Style="width:20px; height:20px; margin-left: -4px; margin-right: 8px; margin-inline-start: -4px; margin-inline-end: 8px;"/>
    } else
    {
        <MudIcon Title="@Text" Color="@TextColor" Icon="@ButtonIcon" Style="width:20px; height:20px; margin-left: -4px; margin-right: 8px; margin-inline-start: -4px; margin-inline-end: 8px;" />
    }
    @Text
</MudButton>

@code {
    [Parameter]
    public bool IsLoading { get; set; } = false;

    [Parameter]
    public Variant Variant { get; set; } = Variant.Filled;

    [Parameter]
    public Color BackgroundColor { get; set; } = Color.Primary;

    [Parameter]
    public Color TextColor { get; set; } = Color.Inherit;

    [Parameter]
    public String Text { get; set; } = "";

    [Parameter]
    public string ButtonIcon { get; set; } = Icons.Material.Outlined.Save;

    [Parameter]
    public EventCallback<MouseEventArgs?> OnClick { get; set; }

    private async void Click()
    {
        if (OnClick.HasDelegate)
            await OnClick.InvokeAsync().ConfigureAwait(false);
    }
}

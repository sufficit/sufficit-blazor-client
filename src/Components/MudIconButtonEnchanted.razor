@namespace MudBlazor
@inherits MudIconButton
@using MudBlazor.Extensions

<MudElement @bind-Ref="@_elementReference"
            HtmlTag="@HtmlTag"
            Class="@Classname"
            Style="@Style"
            @attributes="UserAttributes"
            @onclick="OnClickHandler"
            type="@ButtonType.ToDescriptionString()"
            href="@Href"
            target="@Target"
            rel="@GetRel()"
            disabled="@disabled"
            ClickPropagation="@GetClickPropagation()">
    <MudOverlay Visible="IsLoading" LightBackground="true" Absolute="true" Style="display: block">
        <MudProgressCircular Size="Size.Small" Color="@Color" Indeterminate="true" />
    </MudOverlay>
    @if (!string.IsNullOrEmpty(Icon))
    {
        <span class="mud-icon-button-label">
            <MudIcon Disabled="@Disabled" Icon="@Icon" Size="@Size" />
        </span>
    }
    else
    {
        <MudText Typo="Typo.body2" Color="Color.Inherit">@ChildContent</MudText>
    }
</MudElement>

@code{
    protected bool disabled => GetDisabledState() || IsLoading;

    protected bool IsLoading;

    protected new async Task OnClickHandler(MouseEventArgs ev)
    {
        if (!GetDisabledState())
        {
            IsLoading = true;
            await InvokeAsync(StateHasChanged);

            // normal handling
            await base.OnClickHandler(ev);
            IsLoading = false;

            await InvokeAsync(StateHasChanged);
        }
    }
}
@using System.Text.Json
@using System.Text.Json.Serialization

<MudCard Elevation="0">
    <MudCardHeader>
        <MudStack Spacing="0">
            <MudText Typo="Typo.h3">GitHub</MudText>
            <MudText Typo="Typo.body1">
                Estamos em constante desenvolvimento !
            </MudText>      
            <MudText Typo="Typo.caption">
                Acompanhe nossos trabalhos diretamente pelo <a href="https://github.com/orgs/sufficit" target="_blank">GitHub</a>
            </MudText>
        </MudStack>
    </MudCardHeader>
    <MudCardContent>
        @if (Result == null) {
            @if(Exception != null) {
                    <div class="alert alert-danger text-white">
                        <small>@Exception.Message</small>
                        <p><small>@Exception.StackTrace</small></p>
                    </div>
                } else {
                    <div class="timeline-block mb-3 placeholder-glow">
                        <span class="timeline-step">
                        <MudIcon Icon="@Icons.Custom.Brands.GitHub"></MudIcon>
                        </span>
                        <div class="timeline-content">
                            <h6 class="text-dark text-sm font-weight-bold mb-0"><span class="placeholder col-6"></span></h6>
                            <p class="text-secondary font-weight-normal text-xs mt-1 mb-0"><span class="placeholder col-3"></span></p>
                            <ul><li class="text-secondary font-weight-normal text-xs mt-1 mb-0"><span class="placeholder col-6"></span></li></ul>
                        </div>
                    </div>
                }
            } else {

            <MudTimeline TimelinePosition="TimelinePosition.Top" TimelineAlign="TimelineAlign.Default" TimelineOrientation="TimelineOrientation.Vertical">
                @foreach(var Item in Result) {
                    <MudTimelineItem>
                        <ItemDot>
                            <MudIcon Size="Size.Small" Icon="@Icons.Custom.Brands.GitHub"></MudIcon>
                        </ItemDot>
                        <ItemOpposite>
                            <MudText Color="Color.Dark" Typo="Typo.body1">@Item.CreatedAt.ToLocalTime().ToString("g")</MudText>
                        </ItemOpposite>
                        <ItemContent>
                            <MudCard Outlined="true" Elevation="25" Style="overflow: hidden;">
                                <MudCardContent>
                                    <MudLink Href="@Item.Repo.GetPublicUrl()" Typo="Typo.body2" Target="_blank" Style="display: block">@Item.Repo.Name</MudLink>
                                    <div class="mud-card-content-block">                                                                       
                                        @foreach (var message in @Item.Payload.GetMessages())
                                        {
                                            <MudText Typo="Typo.caption">@message</MudText>
                                        }
                                    </div>
                                </MudCardContent>
                            </MudCard>
                        </ItemContent>
                    </MudTimelineItem>
                }
            </MudTimeline>
        }
    </MudCardContent>
</MudCard>
@code{
    [Inject]
    protected IHttpClientFactory Factory { get; set; } = default!;

    protected Exception? Exception { get; set; }

    protected GitHubApiEventsResult? Result { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            try
            {
                var Client = Factory.CreateClient("GitHub");
                if (Client != null)
                {
                    Client.DefaultRequestHeaders.Add("User-Agent", "sufficit");
                    Result = await Client.GetFromJsonAsync<GitHubApiEventsResult>("https://api.github.com/orgs/sufficit/events?per_page=10");
                }
            }
            catch(Exception ex)
            {
                Exception = ex;
            }     

            await InvokeAsync(StateHasChanged);       
        }
    }

    public class GitHubApiEventsResult : List<GitHubApiEvent>
    {

    }

    // See results in https://api.github.com/orgs/sufficit/events

    public struct GitHubApiEvent
    {
        public Repo Repo { get; set; }

        [JsonPropertyName("created_at")]
        public DateTime CreatedAt { get; set; }

        public Payload Payload { get; set; }
    }

    public struct Repo
    {
        public uint Id { get; set; }
        public string Name { get; set; }
        public string Url { get; set; }

        public string GetPublicUrl() => $"https://www.github.com/{Name}";
    }

    public struct Payload
    {
        public IEnumerable<Commit> Commits { get; set; }

        public string GetMessage() => Commits.FirstOrDefault().Message;

        public bool HasMessages => Commits?.Select(s => s.Message).Any() ?? false;

        public IEnumerable<string> GetMessages() => Commits?.Select(s => s.Message) ?? Array.Empty<string>();
    }

    public struct Commit
    {
        public string Message { get; set; }
    }
}
@using Microsoft.AspNetCore.Components
@using System
@using System.Collections.Generic
@using System.Linq
@using Sufficit.Identity;
@implements IDisposable

@foreach (var ex in Exceptions.ViewExceptions(User.GetUserId()))
{
    <MudAlert>@ex.Message</MudAlert>
}

<ErrorBoundary>
    <ChildContent>
        @ChildContent
    </ChildContent>
    <ErrorContent>
        <MudPaper>
            <MudText Class="pa-5">Aconteceu um imprevisto que não fomos capazes de prever com antecedência ao ocorrido de forma espontânea e sem que tivessemos controle de sua imprevisibilidade.</MudText>
            <MudDivider Class="ma-3"></MudDivider>
            @if(context is HttpRequestException exception)
            {
                <MudAlert Icon="@Icons.Material.Filled.Error">
                    <MudText>@exception.StatusCode</MudText>
                    <MudText Typo="Typo.caption">@exception.InnerException?.Message</MudText>
                </MudAlert>
                <MudDivider Class="ma-3"></MudDivider>
            }
            <MudAlert Icon="@Icons.Material.Filled.Error">
                <MudText>@context.Message</MudText>
                <MudText>@context.StackTrace</MudText>
            </MudAlert>
        </MudPaper>
    </ErrorContent>
</ErrorBoundary>


@code
{
    [Inject] 
    ExceptionControlService Exceptions { get; set; } = default!;

    [EditorRequired]
    [CascadingParameter]
    public UserPrincipal User { get; set; } = default!;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        Exceptions.OnError -= Error;
        Exceptions.OnError += Error;
    }

    protected async void Error(object? _, Exception __)
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Exceptions.OnError -= Error;
    }

    [Obsolete]
    protected string? GetStack(Exception ex)
    {
        System.Diagnostics.StackTrace stack = new System.Diagnostics.StackTrace(ex, true);       
        return stack.GetFrame(8)?.GetMethod()?.DeclaringType?.ToString();
    }
}
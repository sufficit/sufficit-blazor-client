@using Microsoft.AspNetCore.Components
@using System
@using System.Collections.Generic
@using System.Linq
@using Sufficit.Identity;
@implements IDisposable

@foreach (var item in Exceptions.ViewExceptions(User.GetUserId()))
{
    <MudAlert Severity="MudBlazor.Severity.Error" Variant="Variant.Filled" Elevation="1" ShowCloseIcon="true" CloseIconClicked="OnCloseIconClicked">
        <MudText Typo="Typo.body2">@item.Inner.Message</MudText>

        @if (!string.IsNullOrWhiteSpace(item.Component))
        {
            <MudDivider Class="mt-2"></MudDivider>
            <MudText Typo="Typo.caption">From component: @item.Component</MudText>
        }
    </MudAlert>
}

<ErrorBoundary MaximumErrorCount="3">
    <ChildContent>
        @ChildContent
    </ChildContent>
    <ErrorContent>
        <MudPaper>
            <MudText Class="pa-5">Aconteceu um imprevisto que não fomos capazes de prever com antecedência ao ocorrido de forma espontânea e sem que tivessemos controle de sua imprevisibilidade.</MudText>
            <MudDivider Class="ma-3"></MudDivider>
            @if (context is AggregateException aggregate && aggregate.InnerException != null)
            {
                context = aggregate.InnerException;
            }

            @if(context is HttpRequestException exception)
            {
                <MudAlert Icon="@Icons.Material.Filled.Error">
                    <MudText Typo="Typo.subtitle1">@context.GetType()</MudText>
                    <MudText Typo="Typo.subtitle2">@exception.StatusCode</MudText>
                    <MudText Typo="Typo.caption">@exception.InnerException?.Message</MudText>
                </MudAlert>
                <MudDivider Class="ma-3"></MudDivider>
            }
            <MudAlert Icon="@Icons.Material.Filled.Error">
                <MudText Typo="Typo.subtitle1">@context.GetType()</MudText>
                <MudText Typo="Typo.subtitle2">@context.Message</MudText>
                <MudText Typo="Typo.caption">@context.StackTrace</MudText>
            </MudAlert>
        </MudPaper>
    </ErrorContent>
</ErrorBoundary>


@code
{
    [Inject] 
    ExceptionControlService Exceptions { get; set; } = default!;

    [EditorRequired]
    [CascadingParameter]
    public UserPrincipal User { get; set; } = default!;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        Exceptions.OnError -= Error;
        Exceptions.OnError += Error;
    }

    protected async void Error(object? _, Exception __)
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Exceptions.OnError -= Error;
    }

    protected async void OnCloseIconClicked(MudAlert alert) 
        => await InvokeAsync(StateHasChanged);

    [Obsolete]
    protected string? GetStack(Exception ex)
    {
        System.Diagnostics.StackTrace stack = new System.Diagnostics.StackTrace(ex, true);       
        return stack.GetFrame(8)?.GetMethod()?.DeclaringType?.ToString();
    }
}